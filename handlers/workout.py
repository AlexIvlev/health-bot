from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message
from data import load_user_data, save_user_data
from recommendations_data import workout_calories, workout_water

router = Router()


@router.message(Command("log_workout"))
async def log_workout(message: Message):
    user_id = str(message.from_user.id)
    user_data = load_user_data(user_id)

    if not user_data:
        await message.answer("–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–∫–∞ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /set_profile –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
        return

    args = message.text.split(maxsplit=2)
    if len(args) < 3 or not args[2].isdigit():
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏ –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä: /log_workout –±–µ–≥ 30")
        return

    workout_type = args[1].lower()
    workout_time = int(args[2])

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    if workout_type not in workout_calories:
        await message.answer(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: {workout_type}.\n"
                             f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã: –±–µ–≥, –ø–ª–∞–≤–∞–Ω–∏–µ, –≤–µ–ª–æ—Ç—Ä–µ–Ω–∞–∂–µ—Ä, —Å–∏–ª–æ–≤–∞—è, –π–æ–≥–∞, –ø–∏–ª–∞—Ç–µ—Å.")
        return

    # –†–∞—Å—á–µ—Ç —Å–æ–∂–∂—ë–Ω–Ω—ã—Ö –∫–∞–ª–æ—Ä–∏–π –∏ –≤–æ–¥—ã
    calories_burned = (workout_time / 30) * workout_calories[workout_type]
    water_needed = (workout_time / 30) * workout_water[workout_type]

    total_burned_calories = user_data.get("burned_calories", 0) + calories_burned
    total_logged_water = user_data.get("logged_water", 0) + water_needed

    save_user_data(user_id, "burned_calories", total_burned_calories)
    save_user_data(user_id, "logged_water", total_logged_water)

    response = f"üí™ {workout_type.capitalize()} {workout_time} –º–∏–Ω—É—Ç - {int(calories_burned)} –∫–∫–∞–ª."
    response += f"\n–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –≤—ã–ø–µ–π—Ç–µ {int(water_needed)} –º–ª –≤–æ–¥—ã."

    await message.answer(response)
