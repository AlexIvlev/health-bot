from aiogram import Router
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from data import load_user_data, save_user_data
from services.get_food_info import get_food_info

router = Router()


@router.message(Command("log_food"))
async def log_food(message: Message, state: FSMContext):
    user_id = str(message.from_user.id)

    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞. –ü—Ä–∏–º–µ—Ä: /log_food –±–∞–Ω–∞–Ω")
        return

    product_name = args[1]
    food_info = get_food_info(product_name)

    if food_info and food_info["calories"] > 0:
        await state.update_data(food_name=food_info["name"], food_calories=food_info["calories"], user_id=user_id)
        await message.answer(
            f"üçΩ {food_info['name']} ‚Äî {food_info['calories']} –∫–∫–∞–ª –Ω–∞ 100 –≥.\n–°–∫–æ–ª—å–∫–æ –≥—Ä–∞–º–º –≤—ã —Å—ä–µ–ª–∏?")
        await state.set_state("waiting_for_food_weight")
    else:
        await state.update_data(user_id=user_id)
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç –≤ –±–∞–∑–µ. –í–≤–µ–¥–∏—Ç–µ –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –≤—Ä—É—á–Ω—É—é (–∫–∫–∞–ª –Ω–∞ 100 –≥):")
        await state.set_state("waiting_for_manual_calories")


@router.message(StateFilter("waiting_for_food_weight"))
async def process_food_weight(message: Message, state: FSMContext):
    try:
        weight = float(message.text)
        food_data = await state.get_data()
        user_id = food_data.get("user_id")

        if not user_id:
            await message.answer("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            await state.clear()
            return

        user_data = load_user_data(user_id)

        if not user_data:
            await message.answer("–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–∫–∞ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /set_profile –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
            return

        calories_per_100g = food_data.get("food_calories", 0)
        total_calories = (calories_per_100g * weight) / 100

        total_logged = user_data.get("logged_calories", 0) + total_calories
        calorie_goal = user_data.get("calorie_goal", 0)

        save_user_data(user_id, "logged_calories", total_logged)

        remaining = max(calorie_goal - total_logged, 0)

        response = f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ: {total_calories:.1f} –∫–∫–∞–ª.\n"
        response += f"–í—Å–µ–≥–æ –∑–∞ –¥–µ–Ω—å: {total_logged:.1f} –∫–∫–∞–ª.\n"

        if remaining > 0:
            response += f"–î–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–æ—Ä–º—ã –æ—Å—Ç–∞–ª–æ—Å—å {remaining:.1f} –∫–∫–∞–ª."
        else:
            response += f"–í—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ —Å–≤–æ—é –Ω–æ—Ä–º—É –≤ {calorie_goal} –∫–∫–∞–ª –Ω–∞ —Å–µ–≥–æ–¥–Ω—è! üéâ"

        await message.answer(response)
        await state.clear()
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä–∞–º–º–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 150).")


@router.message(StateFilter("waiting_for_manual_calories"))
async def process_manual_calories(message: Message, state: FSMContext):
    try:
        calories_per_100g = float(message.text)
        await state.update_data(food_calories=calories_per_100g)
        await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–µ—Å –ø—Ä–æ–¥—É–∫—Ç–∞ (–≤ –≥—Ä–∞–º–º–∞—Ö):")
        await state.set_state("waiting_for_food_weight")
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 100).")
