from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from data import update_user_data, load_user_data, save_user_data
from services.calculate_calories_norm import calculate_calories_norm
from services.calculate_water_norm import calculate_water_norm

router = Router()


class ProfileSetup(StatesGroup):
    weight = State()
    height = State()
    age = State()
    activity = State()
    city = State()
    water_goal = State()
    calorie_goal = State()


@router.message(Command("set_profile"))
async def start_profile_setup(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å (–≤ –∫–≥):")
    await state.set_state(ProfileSetup.weight)


@router.message(ProfileSetup.weight)
async def process_weight(message: Message, state: FSMContext):
    try:
        weight = float(message.text)
        update_user_data(message.from_user.id, "weight", weight)

        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç (–≤ —Å–º):")
        await state.set_state(ProfileSetup.height)
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 80).")


@router.message(ProfileSetup.height)
async def process_height(message: Message, state: FSMContext):
    try:
        height = int(message.text)
        update_user_data(message.from_user.id, "height", height)

        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:")
        await state.set_state(ProfileSetup.age)
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 180).")


@router.message(ProfileSetup.age)
async def process_age(message: Message, state: FSMContext):
    try:
        age = int(message.text)
        update_user_data(message.from_user.id, "age", age)

        await message.answer("–°–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —É –≤–∞—Å –≤ –¥–µ–Ω—å?")
        await state.set_state(ProfileSetup.activity)
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25).")


@router.message(ProfileSetup.activity)
async def process_activity(message: Message, state: FSMContext):
    try:
        activity = int(message.text)
        update_user_data(message.from_user.id, "activity", activity)

        await message.answer("–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å?")
        await state.set_state(ProfileSetup.city)
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 45).")


@router.message(ProfileSetup.city)
async def process_city(message: Message, state: FSMContext):
    update_user_data(message.from_user.id, "city", message.text)

    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å –ø–æ –∫–∞–ª–æ—Ä–∏—è–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2000) –∏–ª–∏ 'auto' –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞:")
    await state.set_state(ProfileSetup.calorie_goal)


@router.message(ProfileSetup.calorie_goal)
async def process_calorie_goal(message: Message, state: FSMContext):
    user_id = message.from_user.id
    user_data = load_user_data(user_id)

    if message.text.lower() == "auto":
        # –ê–≤—Ç–æ—Ä–∞—Å—á—ë—Ç –∫–∞–ª–æ—Ä–∏–π
        weight = user_data.get("weight")
        height = user_data.get("height")
        age = user_data.get("age")
        activity_minutes = user_data.get("activity", 0)

        if not (weight and height and age):
            await message.answer("–î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å—á—ë—Ç–∞ —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–µ—Å, —Ä–æ—Å—Ç –∏ –≤–æ–∑—Ä–∞—Å—Ç –≤ –ø—Ä–æ—Ñ–∏–ª–µ.")
            return

        calorie_goal = calculate_calories_norm(weight, height, age, activity_minutes)
        await message.answer(f"–í–∞—à–∞ –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏: {int(calorie_goal)} –∫–∫–∞–ª.")
    else:
        try:
            calorie_goal = int(message.text)
        except ValueError:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2000) –∏–ª–∏ 'auto' –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞:")
            return

    update_user_data(user_id, "calorie_goal", calorie_goal)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å –ø–æ –≤–æ–¥–µ (–≤ –º–ª, –Ω–∞–ø—Ä–∏–º–µ—Ä, 2000) –∏–ª–∏ 'auto' –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞:")
    await state.set_state(ProfileSetup.water_goal)


@router.message(ProfileSetup.water_goal)
async def process_water_goal(message: Message, state: FSMContext):
    user_id = message.from_user.id
    user_data = load_user_data(user_id)

    if message.text.lower() == "auto":
        # –ê–≤—Ç–æ—Ä–∞—Å—á—ë—Ç –≤–æ–¥—ã
        weight = user_data.get("weight")
        activity_minutes = user_data.get("activity", 0)
        city = user_data.get("city")

        if not weight or not city:
            await message.answer("–î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–µ—Å –∏ –≥–æ—Ä–æ–¥ –≤ –ø—Ä–æ—Ñ–∏–ª–µ.")
            return

        water_goal = calculate_water_norm(weight, activity_minutes, city)
        await message.answer(f"–í–∞—à–∞ –Ω–æ—Ä–º–∞ –≤–æ–¥—ã —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏: {int(water_goal)} –º–ª.")
    else:
        try:
            water_goal = int(message.text)
        except ValueError:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2000) –∏–ª–∏ 'auto' –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞:")
            return

    update_user_data(user_id, "water_goal", water_goal)
    await message.answer("‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")
    await state.clear()


@router.message(Command("profile"))
async def show_profile(message: Message):
    user_id = message.from_user.id
    user_data = load_user_data(user_id)

    if not user_data:
        await message.answer("–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–∫–∞ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /set_profile –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
        return

    profile_text = (
        f"üìã –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n"
        f"üîπ –í–µ—Å: {user_data.get('weight', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')} –∫–≥\n"
        f"üîπ –†–æ—Å—Ç: {user_data.get('height', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')} —Å–º\n"
        f"üîπ –í–æ–∑—Ä–∞—Å—Ç: {user_data.get('age', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')} –ª–µ—Ç\n"
        f"üîπ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {user_data.get('activity', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')} –º–∏–Ω—É—Ç –≤ –¥–µ–Ω—å\n"
        f"üîπ –ì–æ—Ä–æ–¥: {user_data.get('city', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üîπ –¶–µ–ª—å –ø–æ –∫–∞–ª–æ—Ä–∏—è–º: {user_data.get('calorie_goal', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')} –∫–∫–∞–ª\n"
        f"üîπ –¶–µ–ª—å –ø–æ –≤–æ–¥–µ: {user_data.get('water_goal', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')} –º–ª\n"
        f"üîπ –í–æ–¥—ã –≤—ã–ø–∏—Ç–æ: {user_data.get('logged_water', 0)} –º–ª\n"
        f"üîπ –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–Ω—ã–µ –∫–∞–ª–æ—Ä–∏–∏: {user_data.get('logged_calories', 0)} –∫–∫–∞–ª\n"
        f"üîπ –°–æ–∂–∂—ë–Ω–Ω—ã–µ –∫–∞–ª–æ—Ä–∏–∏: {user_data.get('burned_calories', 0)} –∫–∫–∞–ª"
    )
    await message.answer(profile_text)


class EditProfile(StatesGroup):
    choosing_field = State()
    editing_value = State()


@router.message(Command("edit_profile"))
async def edit_profile_start(message: Message, state: FSMContext):
    await message.answer(
        "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?\n"
        "–í–≤–µ–¥–∏—Ç–µ:\n"
        "üîπ –≤–µ—Å\n"
        "üîπ —Ä–æ—Å—Ç\n"
        "üîπ –≤–æ–∑—Ä–∞—Å—Ç\n"
        "üîπ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å\n"
        "üîπ –≥–æ—Ä–æ–¥\n"
        "üîπ —Ü–µ–ª—å –ø–æ –∫–∞–ª–æ—Ä–∏—è–º\n"
        "üîπ —Ü–µ–ª—å –ø–æ –≤–æ–¥–µ\n"
    )
    await state.set_state(EditProfile.choosing_field)


@router.message(EditProfile.choosing_field)
async def choose_field_to_edit(message: Message, state: FSMContext):
    field_map = {
        "–≤–µ—Å": "weight",
        "—Ä–æ—Å—Ç": "height",
        "–≤–æ–∑—Ä–∞—Å—Ç": "age",
        "–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å": "activity",
        "–≥–æ—Ä–æ–¥": "city",
        "—Ü–µ–ª—å –ø–æ –∫–∞–ª–æ—Ä–∏—è–º": "calorie_goal",
        "—Ü–µ–ª—å –ø–æ –≤–æ–¥–µ": "water_goal"
    }

    field_name = message.text.lower()
    if field_name not in field_map:
        await message.answer(
            "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä. –í–≤–µ–¥–∏—Ç–µ –æ–¥–∏–Ω –∏–∑: –≤–µ—Å, —Ä–æ—Å—Ç, –≤–æ–∑—Ä–∞—Å—Ç, –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, –≥–æ—Ä–æ–¥, —Ü–µ–ª—å –ø–æ –∫–∞–ª–æ—Ä–∏—è–º, —Ü–µ–ª—å –ø–æ –≤–æ–¥–µ."
        )
        return

    await state.update_data(editing_field=field_map[field_name])
    await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {field_name}:")
    await state.set_state(EditProfile.editing_value)


@router.message(EditProfile.editing_value)
async def edit_field_value(message: Message, state: FSMContext):
    user_id = message.from_user.id
    data = await state.get_data()
    field = data.get("editing_field")

    if field in ["weight", "height", "age", "activity", "calorie_goal", "water_goal"]:
        try:
            value = int(message.text)
        except ValueError:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
            return
    else:
        value = message.text

    save_user_data(user_id, field, value)
    await message.answer("‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
    await state.clear()
