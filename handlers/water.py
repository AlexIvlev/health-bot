from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message
from data import load_user_data, save_user_data

router = Router()


@router.message(Command("log_water"))
async def log_water(message: Message):
    user_id = str(message.from_user.id)
    user_data = load_user_data(user_id)

    if not user_data:
        await message.answer("–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–∫–∞ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /set_profile –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
        return

    args = message.text.split(maxsplit=1)
    if len(args) < 2 or not args[1].isdigit():
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã –≤ –º–∏–ª–ª–∏–ª–∏—Ç—Ä–∞—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä: /log_water 250")
        return

    water_logged = int(args[1])
    total_logged = user_data.get("logged_water", 0) + water_logged
    water_goal = user_data.get("water_goal", 0)

    save_user_data(user_id, "logged_water", total_logged)

    remaining = max(water_goal - total_logged, 0)

    response = f"–í—ã –≤—ã–ø–∏–ª–∏ {water_logged} –º–ª –≤–æ–¥—ã. –í—Å–µ–≥–æ –∑–∞ –¥–µ–Ω—å: {total_logged} –º–ª.\n"
    if remaining > 0:
        response += f"–î–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–æ—Ä–º—ã –æ—Å—Ç–∞–ª–æ—Å—å {remaining} –º–ª."
    else:
        response += f"–í—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ —Å–≤–æ—é –Ω–æ—Ä–º—É –≤ {water_goal} –Ω–∞ —Å–µ–≥–æ–¥–Ω—è! üéâ"

    await message.answer(response)
